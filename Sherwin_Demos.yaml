AWSTemplateFormatVersion: "2010-09-09"
#Version 1.3.
Description: Harrison Sherwin course demos template
Parameters: #Variable Inputs
#Networking Parameters
  MainCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: It will be divided into subnets.
    ConstraintDescription: Minimum size is /24 (supports up to 16 subnets). Maximum size is /16.
    #This enforces that IPv4 patterns are used and that they use /16 to /24 ranges.
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-4])'
  SecondCidrBlock:
    Type: String
    Default: 10.1.0.0/16
    Description: It will be divided into subnets.
    ConstraintDescription: Minimum size is /24 (supports up to 16 subnets). Maximum size is /16.
    #This enforces that IPv4 patterns are used and that they use /16 to /24 ranges.
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-4])'
  NumberOfAZs:
    Type: Number
    Default: 2
    Description: Don't exceed the number of AZs in the region.
    ConstraintDescription: Minimum of 1. Maximum of 6. Don't exceed the number of AZs in the region. Selecting 1 AZ skips ALB deployment.
    MinValue: 1
    MaxValue: 6
  NumberOfNATs:
    Type: Number
    Default: 2
    Description: Minimum of 1. Maximum of 6. Don't exceed the number of AZs selected. Remember EIP limits.
    ConstraintDescription: Minimum of 1. Maximum of 6. Don't exceed the number of AZs selected. Not used with 1 AZ. EIP limits on your account should be considered.
    MinValue: 1
    MaxValue: 6
#Domain Parameters
  OwnedDomainName:
    Type: String
    Default: none
    Description: A domain name that you own. Type "none" to not use one. Do not end with a trailing dot.
    MinLength: 4
    MaxLength: 255
  OwnedHostedZoneId:
    Type: String
    Default: none
    Description: The Route 53 hosted zone ID for the above domain. Example - Z0687820MAF0GNYEQVR8.
#EC2 Parameters
  InitialWebServerCapacity:
    Type: Number
    Default: 4
    Description: Minimum of 1. Maximum of 12.
    ConstraintDescription: Minimum of 1. Maximum of 12.
    MinValue: 1
    MaxValue: 12
  RootInstanceAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
      #https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-ami-basics.html
    Description: Read more at docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html#using-systems-manager-parameter-to-find-AMI
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - NumberOfAZs
          - MainCidrBlock
          - SecondCidrBlock
          - NumberOfNATs
          - OwnedDomainName
          - OwnedHostedZoneId
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - InitialWebServerCapacity
          - RootInstanceAMI
    ParameterLabels:
      NumberOfAZs:
        default: "How many AZs should the infrastructure span across?"
      MainCidrBlock:
        default: "What IPv4 CIDR block will be used by the main VPC?"
      SecondCidrBlock:
        default: "What IPv4 CIDR block will be used by the second VPC?"
      NumberOfNATs:
        default: "How many NAT Gateways should be deployed?"
      OwnedDomainName:
        default: "What domain name do you want to use? Type \"none\" to not use one. Using a domain name requires the stack to be deployed in the us-east-1 region."
      OwnedHostedZoneId:
        default: "What is the Route 53 Hosted Zone ID for the above domain, if used?"
      InitialWebServerCapacity:
        default: "How many web servers should be deployed?"
      RootInstanceAMI:
        default: "Which EC2 AMI SSM Parameter should be used?"
Conditions:
  #If only one AZ is requested, an ALB is not deployed and the ASG deploys web servers into the Public Subnet, removing the need for NAT instances as well.
  BuildOnlyOneAZ: !Equals [ !Ref NumberOfAZs, 1 ]
  BuildMoreThanOneAZ: !Not [ !Equals [ !Ref NumberOfAZs, 1 ] ]
  BuildSecondAZ: !Or [ !Equals [ !Ref NumberOfAZs, 2 ], !Condition BuildThirdAZ ]
  BuildThirdAZ:  !Or [ !Equals [ !Ref NumberOfAZs, 3 ], !Condition BuildFourthAZ ]
  BuildFourthAZ: !Or [ !Equals [ !Ref NumberOfAZs, 4 ], !Condition BuildFifthAZ ]
  BuildFifthAZ:  !Or [ !Equals [ !Ref NumberOfAZs, 5 ], !Condition BuildSixthAZ ]
  BuildSixthAZ:  !Equals [ !Ref NumberOfAZs, 6 ]
  BuildSecondNAT: !Or [ !Equals [ !Ref NumberOfNATs, 2 ], !Condition BuildThirdNAT ]
  BuildThirdNAT:  !Or [ !Equals [ !Ref NumberOfNATs, 3 ], !Condition BuildFourthNAT ]
  BuildFourthNAT: !Or [ !Equals [ !Ref NumberOfNATs, 4 ], !Condition BuildFifthNAT ]
  BuildFifthNAT:  !Or [ !Equals [ !Ref NumberOfNATs, 5 ], !Condition BuildSixthNAT ]
  BuildSixthNAT:  !Equals [ !Ref NumberOfNATs, 6 ]
  NoDomain: !Equals [ !Ref OwnedDomainName, "none" ]
  BuildDomain: !Not [ !Equals [ !Ref OwnedDomainName, "none" ] ]
  BuildDomainAndMultiAZ: !And
    - !Condition BuildMoreThanOneAZ
    - !Condition BuildDomain
  BuildMultiAZButNoDomain: !And
    - !Condition BuildMoreThanOneAZ
    - !Condition NoDomain
Resources:
#Networking Resources
  #VPCs
  mainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MainCidrBlock
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Main-VPC
  secondVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref SecondCidrBlock
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Second-VPC
  #mainVPC Components
  mainIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Main-IGW
  mainIGWtoMainVPC: #Attaches IGW to VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref mainVPC
      InternetGatewayId: !Ref mainIGW
  publicRTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref mainVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Public-RTB
  mainIGWroute: #Adds IGW to Route Table
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicRTB
      GatewayId: !Ref mainIGW
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn:
      - mainIGWtoMainVPC
  #mainVPC Public Subnets and Route Table Associations
  publicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: True
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Public-Subnet-A
  publicSubnetArtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRTB
      SubnetId: !Ref publicSubnetA
  publicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildSecondNAT
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: True
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Public-Subnet-B
  publicSubnetBrtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildSecondNAT
    Properties:
      RouteTableId: !Ref publicRTB
      SubnetId: !Ref publicSubnetB
  publicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildThirdNAT
    Properties:
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      MapPublicIpOnLaunch: True
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Public-Subnet-C
  publicSubnetCrtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildThirdNAT
    Properties:
      RouteTableId: !Ref publicRTB
      SubnetId: !Ref publicSubnetC
  publicSubnetD:
    Type: AWS::EC2::Subnet
    Condition: BuildFourthNAT
    Properties:
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 3, !GetAZs ]
      MapPublicIpOnLaunch: True
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Public-Subnet-D
  publicSubnetDrtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildFourthNAT
    Properties:
      RouteTableId: !Ref publicRTB
      SubnetId: !Ref publicSubnetD
  publicSubnetE:
    Type: AWS::EC2::Subnet
    Condition: BuildFifthNAT
    Properties:
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 4, !GetAZs ]
      MapPublicIpOnLaunch: True
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Public-Subnet-E
  publicSubnetErtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildFifthNAT
    Properties:
      RouteTableId: !Ref publicRTB
      SubnetId: !Ref publicSubnetE
  publicSubnetF:
    Type: AWS::EC2::Subnet
    Condition: BuildSixthNAT
    Properties:
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 5, !GetAZs ]
      MapPublicIpOnLaunch: True
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Public-Subnet-F
  publicSubnetFrtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildSixthNAT
    Properties:
      RouteTableId: !Ref publicRTB
      SubnetId: !Ref publicSubnetF
  #mainVPC Private Subnets
  privateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildMoreThanOneAZ
    Properties:
      CidrBlock: !Select [ 6, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-Subnet-A
  privateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildSecondAZ
    Properties:
      CidrBlock: !Select [ 7, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-Subnet-B
  privateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildThirdAZ
    Properties:
      CidrBlock: !Select [ 8, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-Subnet-C
  privateSubnetD:
    Type: AWS::EC2::Subnet
    Condition: BuildFourthAZ
    Properties:
      CidrBlock: !Select [ 9, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 3, !GetAZs ]
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-Subnet-D
  privateSubnetE:
    Type: AWS::EC2::Subnet
    Condition: BuildFifthAZ
    Properties:
      CidrBlock: !Select [ 10, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 4, !GetAZs ]
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-Subnet-E
  privateSubnetF:
    Type: AWS::EC2::Subnet
    Condition: BuildSixthAZ
    Properties:
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt mainVPC.CidrBlock, 16, 4 ] ]
      VpcId: !Ref mainVPC
      AvailabilityZone: !Select [ 5, !GetAZs ]
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-Subnet-F
  #Private Subnet Route Tables and Associations
  privateRTBa:
    Type: AWS::EC2::RouteTable
    Condition: BuildMoreThanOneAZ
    Properties:
      VpcId: !Ref mainVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-RTB-A
  privateSubnetArtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildMoreThanOneAZ
    Properties:
      RouteTableId: !Ref privateRTBa
      SubnetId: !Ref privateSubnetA
  privateRTBb:
    Type: AWS::EC2::RouteTable
    Condition: BuildSecondNAT
    Properties:
      VpcId: !Ref mainVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-RTB-B
  privateSubnetBrtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildSecondAZ
    Properties:
      RouteTableId:
        !If [ BuildSecondNAT, !Ref privateRTBb, !Ref privateRTBa ]
      SubnetId: !Ref privateSubnetB
  privateRTBc:
    Type: AWS::EC2::RouteTable
    Condition: BuildThirdNAT
    Properties:
      VpcId: !Ref mainVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-RTB-C
  privateSubnetCrtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildThirdAZ
    Properties:
      RouteTableId:
        !If [ BuildThirdNAT, !Ref privateRTBc, !Ref privateRTBa ]
      SubnetId: !Ref privateSubnetC
  privateRTBd:
    Type: AWS::EC2::RouteTable
    Condition: BuildFourthNAT
    Properties:
      VpcId: !Ref mainVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-RTB-D
  privateSubnetDrtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildFourthAZ
    Properties:
      RouteTableId:
        !If [ BuildFourthNAT, !Ref privateRTBd, !If [ BuildSecondNAT, !Ref privateRTBb, !Ref privateRTBa ] ]
      SubnetId: !Ref privateSubnetD
  privateRTBe:
    Type: AWS::EC2::RouteTable
    Condition: BuildFifthNAT
    Properties:
      VpcId: !Ref mainVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-RTB-E
  privateSubnetErtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildFifthAZ
    Properties:
      RouteTableId:
        !If [ BuildFifthNAT, !Ref privateRTBe, !Ref privateRTBa ]
      SubnetId: !Ref privateSubnetE
  privateRTBf:
    Type: AWS::EC2::RouteTable
    Condition: BuildSixthNAT
    Properties:
      VpcId: !Ref mainVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Private-RTB-F
  privateSubnetFrtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildSixthAZ
    Properties:
      RouteTableId:
        !If [ BuildSixthNAT, !Ref privateRTBf, !If [ BuildThirdNAT, !Ref privateRTBc, !If [ BuildSecondNAT, !Ref privateRTBb, !Ref privateRTBa ] ] ]
      SubnetId: !Ref privateSubnetF
  #NAT Elastic IPs
    #EIP default limit of 5 is a known issue. Only known resolution would be to create a Lambda function to check the limit and make the increase.
  NATaEIP:
    Type: AWS::EC2::EIP
    Condition: BuildMoreThanOneAZ
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-EIP-A
  NATbEIP:
    Type: AWS::EC2::EIP
    Condition: BuildSecondNAT
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-EIP-B
  NATcEIP:
    Type: AWS::EC2::EIP
    Condition: BuildThirdNAT
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-EIP-C
  NATdEIP:
    Type: AWS::EC2::EIP
    Condition: BuildFourthNAT
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-EIP-D
  NATeEIP:
    Type: AWS::EC2::EIP
    Condition: BuildFifthNAT
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-EIP-E
  NATfEIP:
    Type: AWS::EC2::EIP
    Condition: BuildSixthNAT
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-EIP-F
  #NAT Gateways
  NATgatewayA:
    Type: AWS::EC2::NatGateway
    Condition: BuildMoreThanOneAZ
    Properties:
      SubnetId: !Ref publicSubnetA
      AllocationId: !GetAtt NATaEIP.AllocationId
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-Gateway-A
  NATgatewayB:
    Type: AWS::EC2::NatGateway
    Condition: BuildSecondNAT
    Properties:
      SubnetId: !Ref publicSubnetB
      AllocationId: !GetAtt NATbEIP.AllocationId
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-Gateway-B
  NATgatewayC:
    Type: AWS::EC2::NatGateway
    Condition: BuildThirdNAT
    Properties:
      SubnetId: !Ref publicSubnetC
      AllocationId: !GetAtt NATcEIP.AllocationId
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-Gateway-C
  NATgatewayD:
    Type: AWS::EC2::NatGateway
    Condition: BuildFourthNAT
    Properties:
      SubnetId: !Ref publicSubnetD
      AllocationId: !GetAtt NATdEIP.AllocationId
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-Gateway-D
  NATgatewayE:
    Type: AWS::EC2::NatGateway
    Condition: BuildFifthNAT
    Properties:
      SubnetId: !Ref publicSubnetE
      AllocationId: !GetAtt NATeEIP.AllocationId
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-Gateway-E
  NATgatewayF:
    Type: AWS::EC2::NatGateway
    Condition: BuildSixthNAT
    Properties:
      SubnetId: !Ref publicSubnetF
      AllocationId: !GetAtt NATfEIP.AllocationId
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-NAT-Gateway-F
  #NAT Routes for Private Subnet Route Tables
  NATgatewayAroute:
    Type: AWS::EC2::Route
    Condition: BuildMoreThanOneAZ
    Properties:
      RouteTableId: !Ref privateRTBa
      NatGatewayId: !Ref NATgatewayA
      DestinationCidrBlock: 0.0.0.0/0
  NATgatewayBroute:
    Type: AWS::EC2::Route
    Condition: BuildSecondNAT
    Properties:
      RouteTableId: !Ref privateRTBb
      NatGatewayId: !Ref NATgatewayB
      DestinationCidrBlock: 0.0.0.0/0
  NATgatewayCroute:
    Type: AWS::EC2::Route
    Condition: BuildThirdNAT
    Properties:
      RouteTableId: !Ref privateRTBc
      NatGatewayId: !Ref NATgatewayC
      DestinationCidrBlock: 0.0.0.0/0
  NATgatewayDroute:
    Type: AWS::EC2::Route
    Condition: BuildFourthNAT
    Properties:
      RouteTableId: !Ref privateRTBd
      NatGatewayId: !Ref NATgatewayD
      DestinationCidrBlock: 0.0.0.0/0
  NATgatewayEroute:
    Type: AWS::EC2::Route
    Condition: BuildFifthNAT
    Properties:
      RouteTableId: !Ref privateRTBe
      NatGatewayId: !Ref NATgatewayE
      DestinationCidrBlock: 0.0.0.0/0
  NATgatewayFroute:
    Type: AWS::EC2::Route
    Condition: BuildSixthNAT
    Properties:
      RouteTableId: !Ref privateRTBf
      NatGatewayId: !Ref NATgatewayF
      DestinationCidrBlock: 0.0.0.0/0
#EC2 Resources
  webServerTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-Web-Server-Template
      LaunchTemplateData:
        ImageId: !Ref RootInstanceAMI
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn:
            Fn::GetAtt: [ webServerInstanceProfile, Arn ]
        SecurityGroupIds:
          - Fn::If:
            - BuildMoreThanOneAZ
            - Ref: webServerPrivateSG
            - Ref: webServerPublicSG
        Monitoring: #Whether or not detailed monitoring is used.
          Enabled: True
        TagSpecifications:
          - ResourceType: instance #Names all instances deployed.
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-Web-Server
        UserData:
        #Cloud-init documentation is here: https://cloudinit.readthedocs.io/en/latest/
          Fn::Base64: #Base64 Encoding
            !Sub |
              #cloud-config
              package_update: true
              package_upgrade: true
              packages:
                - httpd   #Apache HTTP Server https://httpd.apache.org/docs/
                - pip     #Package Installer for Python (Used with ElastiCache demo) https://pip.pypa.io/en/stable/
              runcmd:
                - echo 'I finished attempting updates and package installs.'
                #Make the index.html page
                - sudo touch /var/www/html/index.html
                - echo '<html><body><h1>I am a web server on EC2 instance' >> /var/www/html/index.html
                - curl http://169.254.169.254/latest/meta-data/instance-id >> /var/www/html/index.html
                - echo '.</h1><h2>I am running on a ' >> /var/www/html/index.html
                - curl http://169.254.169.254/latest/meta-data/instance-type >> /var/www/html/index.html
                - echo ' instance in the ' >> /var/www/html/index.html
                - curl http://169.254.169.254/latest/meta-data/placement/availability-zone >> /var/www/html/index.html
                - echo ' AZ.</h2></body></html>' >> /var/www/html/index.html
                - echo 'I created the webpage.'
                #Web Server Configuration
                - sudo chkconfig httpd on
                - echo 'I configured the web server to start on boot.'
                #Redis-py Installation
                - pip install redis #https://pypi.org/project/redis/
                - echo 'I installed Redis with pip.'
              power_state:
                mode: reboot  #This is done to make sure updates are installed.
                message: Rebooting per CloudInit
                timeout: 300
  webServerPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildMoreThanOneAZ
    Properties:
      GroupName: !Sub ${AWS::StackName}-Web-Server-Private-SG
      GroupDescription: Allow HTTP traffic from ALB to Web Servers
      VpcId: !Ref mainVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref mainALBsg
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - SourceSecurityGroupId: !Ref mainALBsg
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
  webServerPublicSG:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildOnlyOneAZ
    Properties:
      GroupName: !Sub ${AWS::StackName}-Web-Server-Public-SG
      GroupDescription: Allow public HTTP traffic to Web Servers
      VpcId: !Ref mainVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
  webServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy: #Replacing the ASG on stack updates forces recreation of all EC2 instances.
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
    Properties:
      DesiredCapacity: !Ref InitialWebServerCapacity
      MaxSize: 12
      MinSize: 0
      MaxInstanceLifetime: 604800 #Measured in Seconds
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref webServerTargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref webServerTemplate
        Version: !GetAtt webServerTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - Fn::If:
          - BuildMoreThanOneAZ
          - Ref: privateSubnetA
          - Ref: publicSubnetA
        - Fn::If:
          - BuildSecondAZ
          - Ref: privateSubnetB
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildThirdAZ
          - Ref: privateSubnetC
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildFourthAZ
          - Ref: privateSubnetD
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildFifthAZ
          - Ref: privateSubnetE
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildSixthAZ
          - Ref: privateSubnetF
          - Ref: AWS::NoValue
  webServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-EC2-Target-Group
      VpcId: !Ref mainVPC
      Protocol: HTTP
      Port: 80
  webServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-Web-Server-Instance-Profile
      Path: /
      Roles:
        - !Ref webServerRole
#ALB Resources
  mainALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: BuildMoreThanOneAZ
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref mainALBsg
      Subnets:
        - !Ref publicSubnetA
        - Fn::If:
          - BuildSecondNAT
          - Ref: publicSubnetB
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildThirdNAT
          - Ref: publicSubnetC
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildFourthNAT
          - Ref: publicSubnetD
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildFifthNAT
          - Ref: publicSubnetE
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildSixthNAT
          - Ref: publicSubnetF
          - Ref: AWS::NoValue
    DependsOn:
      - mainIGWroute
  mainALBsg:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildMoreThanOneAZ
    Properties:
      GroupName: !Sub ${AWS::StackName}-ALB-Security-Group
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref mainVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
  mainALBlistenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: BuildMoreThanOneAZ
    Properties:
      LoadBalancerArn: !Ref mainALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref webServerTargetGroup
  mainALBlistenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: BuildDomainAndMultiAZ
    Properties:
      LoadBalancerArn: !Ref mainALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref wildCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref webServerTargetGroup
#IAM Resources
  webServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-Web-Server-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      MaxSessionDuration: 3600  #In Seconds
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess  #This is a built-in policy.
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore  #This is a built-in policy.
#CloudFront Resources
  cloudfrontS3DistroWithDomain:
    Type: AWS::CloudFront::Distribution
    Condition: BuildDomain
    Properties:
      DistributionConfig:
        Enabled: True
        Aliases:
          - Fn::Sub:
            - static.${Domain}
            - Domain: !Ref OwnedDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref wildCertificate
          SslSupportMethod: sni-only
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          #CachePolicyId should be used instead of ForwardedValues, but CachePolicyId's can't be created by CloudFront directly. This is a future improvement. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-defaultcachebehavior.html
          ForwardedValues:
            QueryString: False
          Compress: True
          TargetOriginId: s3Origin
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${IdentityId}
                - IdentityId: !Ref cloudfrontOAI
            DomainName: !GetAtt mainS3Bucket.DomainName
            Id: s3Origin
  cloudfrontLBDistroWithDomain:
    Type: AWS::CloudFront::Distribution
    Condition: BuildDomainAndMultiAZ
    Properties:
      DistributionConfig:
        Enabled: True
        Aliases:
          - Fn::Sub:
            - lb-cache.${Domain}
            - Domain: !Ref OwnedDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref wildCertificate
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          #CachePolicyId should be used instead of ForwardedValues, but CachePolicyId's can't be created by CloudFront directly. This is a future improvement. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-defaultcachebehavior.html
          ForwardedValues:
            QueryString: False
          Compress: True
          TargetOriginId: albOrigin
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
            DomainName:
              !GetAtt mainALB.DNSName
            Id: albOrigin
  cloudfrontS3DistroWithoutDomain:
    Type: AWS::CloudFront::Distribution
    Condition: NoDomain
    Properties:
      DistributionConfig:
        Enabled: True
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          #CachePolicyId should be used instead of ForwardedValues, but CachePolicyId's can't be created by CloudFront directly. This is a future improvement. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-defaultcachebehavior.html
          ForwardedValues:
            QueryString: False
          Compress: True
          TargetOriginId: s3Origin
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${IdentityId}
                - IdentityId: !Ref cloudfrontOAI
            DomainName: !GetAtt mainS3Bucket.DomainName
            Id: s3Origin
  cloudfrontLBDistroWithoutDomain:
    Type: AWS::CloudFront::Distribution
    Condition: BuildMultiAZButNoDomain
    Properties:
      DistributionConfig:
        Enabled: True
        DefaultCacheBehavior:
          #CachePolicyId should be used instead of ForwardedValues, but CachePolicyId's can't be created by CloudFront directly. This is a future improvement. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-defaultcachebehavior.html
          ForwardedValues:
            QueryString: False
          Compress: True
          TargetOriginId: albOrigin
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
            DomainName:
              !GetAtt mainALB.DNSName
            Id: albOrigin
  cloudfrontOAI:
    #Used to Reference CloudFront as an Identity in an S3 Bucket Policy
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-CloudFront-OAI
#ACM Resources
  wildCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: BuildDomain
    Properties:
      DomainName:
        Fn::Sub:
          - "*.${Domain}"
          - Domain: !Ref OwnedDomainName
      DomainValidationOptions:
        - DomainName: !Ref OwnedDomainName
          HostedZoneId: !Ref OwnedHostedZoneId
      ValidationMethod: 'DNS'
    DependsOn:
      - rootCertificate
  rootCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: BuildDomain
    Properties:
      DomainName: !Ref OwnedDomainName
      DomainValidationOptions:
        - DomainName: !Ref OwnedDomainName
          HostedZoneId: !Ref OwnedHostedZoneId
      ValidationMethod: 'DNS'
#Route 53 Resources
  lbSubDomain:
    Type: AWS::Route53::RecordSet
    Condition: BuildDomainAndMultiAZ
    Properties:
      HostedZoneName: !Sub
        - ${Domain}.
        - Domain: !Ref OwnedDomainName
      Name: !Sub
            - lb.${Domain}
            - Domain: !Ref OwnedDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt mainALB.DNSName
        EvaluateTargetHealth: False
        HostedZoneId: !GetAtt mainALB.CanonicalHostedZoneID
  staticSubDomain:
    Type: AWS::Route53::RecordSet
    Condition: BuildDomain
    Properties:
      HostedZoneName: !Sub
        - ${Domain}.
        - Domain: !Ref OwnedDomainName
      Name: !Sub
            - static.${Domain}
            - Domain: !Ref OwnedDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt cloudfrontS3DistroWithDomain.DomainName
        EvaluateTargetHealth: False
        HostedZoneId: Z2FDTNDATAQYW2  #This is always the CloudFront HostedZoneId.
  lbcacheSubDomain:
    Type: AWS::Route53::RecordSet
    Condition: BuildDomainAndMultiAZ
    Properties:
      HostedZoneName: !Sub
        - ${Domain}.
        - Domain: !Ref OwnedDomainName
      Name: !Sub
            - lb-cache.${Domain}
            - Domain: !Ref OwnedDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt cloudfrontLBDistroWithDomain.DomainName
        EvaluateTargetHealth: False
        HostedZoneId: Z2FDTNDATAQYW2  #This is always the CloudFront HostedZoneId.
#S3 Resources
  mainS3Bucket:
    Type: AWS::S3::Bucket #The bucket name will be generated automatically.
    Properties:
      VersioningConfiguration:
        Status: Enabled
  mainS3BucketPolicy:
    #This policy has no directly public facing components.
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref mainS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub '${mainS3Bucket.Arn}/*'
            Principal:
              #Only CloudFront can use this statement.
              CanonicalUser: !GetAtt cloudfrontOAI.S3CanonicalUserId
          - Action:
              - 's3:*'
            Effect: Allow
            Resource:
              - !GetAtt 'mainS3Bucket.Arn'
              - !Sub '${mainS3Bucket.Arn}/*'
            Principal: '*'
            Condition:
              #Only resources accessing S3 through the VPC endpoint can use this statement.
              StringEquals:
                'aws:SourceVpce': !Ref s3endpoint
  s3endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref mainVPC
      RouteTableIds:
        - !Ref publicRTB
        - Fn::If:
          - BuildMoreThanOneAZ
          - Ref: privateRTBa
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildSecondNAT
          - Ref: privateRTBb
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildThirdNAT
          - Ref: privateRTBc
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildFourthNAT
          - Ref: privateRTBd
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildFifthNAT
          - Ref: privateRTBe
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildSixthNAT
          - Ref: privateRTBf
          - Ref: AWS::NoValue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              - '*'
  cleanupBucket:
    #Source: https://gist.github.com/drumadrian/e1601ab34e7f609b5075f65599108960
    DependsOn: cleanupBucketLambda
    Type: Custom::cleanupBucket
    Properties:
      ServiceToken:
        !GetAtt cleanupBucketLambda.Arn
      BucketName: !Ref mainS3Bucket
  cleanupBucketLambda:
    #Source: https://gist.github.com/drumadrian/e1601ab34e7f609b5075f65599108960
    DependsOn: mainS3Bucket
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
          import json
          import boto3
          from botocore.vendored import requests
          def empty_delete_buckets(bucket_name):
              """
              Empties and deletes the bucket
              :param bucket_name:
              :param region:
              :return:
              """
              print "trying to delete the bucket {0}".format(bucket_name)
              s3_client = boto3.client('s3')
              s3 = boto3.resource('s3')
              try:
                  bucket = s3.Bucket(bucket_name).load()
              except ClientError:
                  print "bucket {0} does not exist".format(bucket_name)
                  return
              # Check if versioning is enabled
              response = s3_client.get_bucket_versioning(Bucket=bucket_name)
              status = response.get('Status','')
              if status == 'Enabled':
                  response = s3_client.put_bucket_versioning(Bucket=bucket_name,
                                                             VersioningConfiguration={'Status': 'Suspended'})
              paginator = s3_client.get_paginator('list_object_versions')
              page_iterator = paginator.paginate(
                  Bucket=bucket_name
              )
              for page in page_iterator:
                  print page
                  if 'DeleteMarkers' in page:
                      delete_markers = page['DeleteMarkers']
                      if delete_markers is not None:
                          for delete_marker in delete_markers:
                              key = delete_marker['Key']
                              versionId = delete_marker['VersionId']
                              s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)
                  if 'Versions' in page and page['Versions'] is not None:
                      versions = page['Versions']
                      for version in versions:
                          print version
                          key = version['Key']
                          versionId = version['VersionId']
                          s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)
              object_paginator = s3_client.get_paginator('list_objects_v2')
              page_iterator = object_paginator.paginate(
                  Bucket=bucket_name
              )
              for page in page_iterator:
                  if 'Contents' in page:
                      for content in page['Contents']:
                          key = content['Key']
                          s3_client.delete_object(Bucket=bucket_name, Key=content['Key'])
              print "Successfully emptied the bucket {0}".format(bucket_name)
          def lambda_handler(event, context):
              try:
                  bucket = event['ResourceProperties']['BucketName']
                  if event['RequestType'] == 'Delete':
                      empty_delete_buckets(bucket)
                  sendResponseCfn(event, context, "SUCCESS")
              except Exception as e:
                  print(e)
                  sendResponseCfn(event, context, "FAILED")
          def sendResponseCfn(event, context, responseStatus):
              response_body = {'Status': responseStatus,
                               'Reason': 'Log stream name: ' + context.log_stream_name,
                               'PhysicalResourceId': context.log_stream_name,
                               'StackId': event['StackId'],
                               'RequestId': event['RequestId'],
                               'LogicalResourceId': event['LogicalResourceId'],
                               'Data': json.loads("{}")}
              requests.put(event['ResponseURL'], data=json.dumps(response_body))
      Description: cleanup Bucket on Delete Lambda function.
      FunctionName: !Sub ${AWS::StackName}-S3-Cleaner
      Handler: index.lambda_handler
      Role : !GetAtt cleanupBucketLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
  cleanupBucketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-S3-Cleaner-Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            - s3:*
            Resource: '*'
          - Effect: Deny
            Action:
            - s3:DeleteBucket
            Resource: '*'
#Database Resources
  dynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Dynamo-Table
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
  dynamoEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref mainVPC
      RouteTableIds:
        - !Ref publicRTB
        - Fn::If:
          - BuildMoreThanOneAZ
          - Ref: privateRTBa
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildSecondNAT
          - Ref: privateRTBb
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildThirdNAT
          - Ref: privateRTBc
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildFourthNAT
          - Ref: privateRTBd
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildFifthNAT
          - Ref: privateRTBe
          - Ref: AWS::NoValue
        - Fn::If:
          - BuildSixthNAT
          - Ref: privateRTBf
          - Ref: AWS::NoValue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'dynamodb:*'
            Resource:
              - '*'
#Cloud9
  cloud9instance:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      AutomaticStopTimeMinutes: 240
      ConnectionType: CONNECT_SSH
      Description: IDE Shell for Demos
      ImageId: amazonlinux-2-x86_64
      InstanceType: t2.micro
      Name: !Sub ${AWS::StackName}-Cloud9
      SubnetId: !Ref publicSubnetA
#ElastiCache Resources
  elasticacheSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ElastiCache-SG
      GroupDescription: Allow Redis traffic from Web Servers to ElastiCache Cluster.
      VpcId: !Ref mainVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !If [ BuildMoreThanOneAZ, !Ref webServerPrivateSG, !Ref webServerPublicSG ]
          FromPort: 6379  #Default Redis Port
          ToPort: 6379
          IpProtocol: tcp
  elasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Sub ${AWS::StackName}-ElastiCache-Subnet-Group
      Description: Subnet Group for !Sub ${AWS::StackName} ElastiCache Cluster
      SubnetIds:
        - !If [ BuildMoreThanOneAZ, !Ref privateSubnetA, !Ref publicSubnetA ]
        - !If [ BuildSecondAZ, !Ref privateSubnetB, !Ref AWS::NoValue ]
        - !If [ BuildThirdAZ, !Ref privateSubnetC, !Ref AWS::NoValue ]
        - !If [ BuildFourthAZ, !Ref privateSubnetD, !Ref AWS::NoValue ]
        - !If [ BuildFifthAZ, !Ref privateSubnetE, !Ref AWS::NoValue ]
        - !If [ BuildSixthAZ, !Ref privateSubnetF, !Ref AWS::NoValue ]
  elasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref elasticacheSubnetGroup
      ClusterName: !Sub ${AWS::StackName}-ElastiCache-Cluster
      Engine: redis
      NumCacheNodes: 1
      Port: 6379
      PreferredAvailabilityZone: !Select [ 0, !GetAZs ]
      PreferredMaintenanceWindow: sat:23:00-sun:01:30
      VpcSecurityGroupIds:
        - !GetAtt elasticacheSG.GroupId
Outputs:
  mainALBdns:
    Description: Main ALB DNS Endpoint
    Value:
      Fn::If:
        - BuildMoreThanOneAZ
        - !GetAtt mainALB.DNSName
        - "An ALB is not created when using one AZ."
    Export:
      Name: !Sub ${AWS::StackName}-mainALBdns
  mainS3dns:
    Description: Main S3 Bucket DNS
    Value: !GetAtt mainS3Bucket.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-mainS3dns
  mainS3name:
    Description: Main S3 Bucket Name
    Value: !Select [ 0, !Split [ ., !GetAtt mainS3Bucket.DomainName ] ]
    Export:
      Name: !Sub ${AWS::StackName}-mainS3name
  cloudfrontS3DistroDNS:
    Description: CloudFront Distribution DNS Endpoint for S3 Origin
    Value:
      Fn::If:
        - BuildDomain
        - !GetAtt cloudfrontS3DistroWithDomain.DomainName
        - !GetAtt cloudfrontS3DistroWithoutDomain.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-cloudfrontS3Distro
  cloudfrontLBDistroDNS:
    Description: CloudFront Distribution DNS Endpoint for ALB Origin
    Value:
      Fn::If:
        - BuildMoreThanOneAZ
        - Fn::If:
          - BuildDomain
          - !GetAtt cloudfrontLBDistroWithDomain.DomainName
          - !GetAtt cloudfrontLBDistroWithoutDomain.DomainName
        - "A CloudFront distribution for the ALB is not created when using one AZ."
    Export:
      Name: !Sub ${AWS::StackName}-cloudfrontLBDistro
  redisClusterEndpoint:
    Description: CloudFront Distribution DNS Endpoint for ALB Origin
    Value: !GetAtt elasticacheCluster.RedisEndpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-redisClusterEndpoint